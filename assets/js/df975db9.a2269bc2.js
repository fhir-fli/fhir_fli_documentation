"use strict";(self.webpackChunkfhir_fli_documentation=self.webpackChunkfhir_fli_documentation||[]).push([[29],{7978:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>r,default:()=>h,frontMatter:()=>l,metadata:()=>s,toc:()=>d});var i=n(4848),a=n(8453);const l={id:"class_structure",title:"Class Structure"},r="Class Utility Methods",s={id:"core/class_structure",title:"Class Structure",description:"This document explains the structure and utility methods available in FHIR-FLI classes that allow for flexible manipulation and access to FHIR data.",source:"@site/docs/core/class_structure.md",sourceDirName:"core",slug:"/core/class_structure",permalink:"/fhir_fli_documentation/docs/core/class_structure",draft:!1,unlisted:!1,editUrl:"https://github.com/fhir-fli/fhir_fli_documentation/tree/main/docs/core/class_structure.md",tags:[],version:"current",frontMatter:{id:"class_structure",title:"Class Structure"},sidebar:"tutorialSidebar",previous:{title:"Serialization/Deserialization",permalink:"/fhir_fli_documentation/docs/core/serialization"},next:{title:"Polymprhic Types",permalink:"/fhir_fli_documentation/docs/core/polymorphic_types"}},c={},d=[{value:"Class Structure",id:"class-structure",level:2},{value:"Constructor and Fields",id:"constructor-and-fields",level:3},{value:"Empty Constructor",id:"empty-constructor",level:3},{value:"Common Utility Methods and Properties",id:"common-utility-methods-and-properties",level:2},{value:"fhirType Property",id:"fhirtype-property",level:3},{value:"Reflection-Like Functionality",id:"reflection-like-functionality",level:3},{value:"listChildrenNames()",id:"listchildrennames",level:4},{value:"getChildrenByName()",id:"getchildrenbyname",level:4},{value:"getChildByName()",id:"getchildbyname",level:4},{value:"setChildByName()",id:"setchildbyname",level:4},{value:"typeByElementName()",id:"typebyelementname",level:4},{value:"Object Manipulation Methods",id:"object-manipulation-methods",level:3},{value:"createProperty()",id:"createproperty",level:4},{value:"clear()",id:"clear",level:4},{value:"copyWith()",id:"copywith",level:4},{value:"equalsDeep()",id:"equalsdeep",level:4},{value:"Usage Example",id:"usage-example",level:2}];function o(e){const t={code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",li:"li",p:"p",pre:"pre",ul:"ul",...(0,a.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.h1,{id:"class-utility-methods",children:"Class Utility Methods"}),"\n",(0,i.jsx)(t.p,{children:"This document explains the structure and utility methods available in FHIR-FLI classes that allow for flexible manipulation and access to FHIR data."}),"\n",(0,i.jsx)(t.h2,{id:"class-structure",children:"Class Structure"}),"\n",(0,i.jsx)(t.p,{children:"Each FHIR resource in the FHIR-FLI libraries is implemented as a Dart class with a consistent structure. Let's examine the key components:"}),"\n",(0,i.jsx)(t.h3,{id:"constructor-and-fields",children:"Constructor and Fields"}),"\n",(0,i.jsx)(t.p,{children:"FHIR classes have a primary constructor with named parameters for all fields defined in the FHIR specification. Fields may be required or optional, and follow the FHIR data model."}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-dart",children:"const Age({\n  super.id,\n  super.extension_,\n  super.value,\n  super.comparator,\n  super.unit,\n  super.system,\n  super.code,\n  super.disallowExtensions,\n  super.objectPath = 'Age',\n});\n"})}),"\n",(0,i.jsx)(t.h3,{id:"empty-constructor",children:"Empty Constructor"}),"\n",(0,i.jsxs)(t.p,{children:["Each class provides an ",(0,i.jsx)(t.code,{children:".empty()"})," factory constructor that creates an instance with placeholder values for required fields. This is particularly useful for FHIR mapping operations where you need to initialize objects without specific data yet."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-dart",children:"// Create an empty Age object with minimal initialization\nfinal age = Age.empty();\n"})}),"\n",(0,i.jsx)(t.p,{children:"The empty constructor is primarily used in FHIR mapping scenarios and not typically needed by most developers in everyday use."}),"\n",(0,i.jsx)(t.h2,{id:"common-utility-methods-and-properties",children:"Common Utility Methods and Properties"}),"\n",(0,i.jsx)(t.h3,{id:"fhirtype-property",children:"fhirType Property"}),"\n",(0,i.jsxs)(t.p,{children:["The ",(0,i.jsx)(t.code,{children:"fhirType"})," getter returns a string representation of the FHIR type as defined in the FHIR specification:"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-dart",children:"@override\nString get fhirType => 'Age';\n"})}),"\n",(0,i.jsxs)(t.p,{children:["It's important to note that the ",(0,i.jsx)(t.code,{children:"fhirType"}),' is not always identical to the Dart class name. In cases where a FHIR type name conflicts with Dart keywords or common types (e.g., "List"), the Dart class is named differently (e.g., "FhirList"), but the ',(0,i.jsx)(t.code,{children:"fhirType"}),' property still returns the correct FHIR type name ("List").']}),"\n",(0,i.jsx)(t.h3,{id:"reflection-like-functionality",children:"Reflection-Like Functionality"}),"\n",(0,i.jsx)(t.p,{children:"Since Flutter doesn't fully support Dart reflection, FHIR-FLI implements several methods to enable reflection-like capabilities:"}),"\n",(0,i.jsx)(t.h4,{id:"listchildrennames",children:"listChildrenNames()"}),"\n",(0,i.jsx)(t.p,{children:"Returns a list of all available field names in the FHIR resource:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-dart",children:"// Get all field names for an Age object\nfinal fieldNames = age.listChildrenNames();\n// Result: ['id', 'extension', 'value', 'comparator', 'unit', 'system', 'code']\n"})}),"\n",(0,i.jsx)(t.h4,{id:"getchildrenbyname",children:"getChildrenByName()"}),"\n",(0,i.jsx)(t.p,{children:"Retrieves all matching fields by name. It returns a list of objects, regardless of whether the underlying field is a single value or a list:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-dart",children:"// Get the 'unit' field from an Age object\nfinal units = age.getChildrenByName('unit');\n"})}),"\n",(0,i.jsxs)(t.p,{children:["Important notes about ",(0,i.jsx)(t.code,{children:"getChildrenByName()"}),":"]}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:"The name passed should be the name used in FHIR JSON (not necessarily the exact Dart field name)"}),"\n",(0,i.jsx)(t.li,{children:'For polymorphic types, you can use the base name, the base name with an "X", or a specific type name'}),"\n",(0,i.jsxs)(t.li,{children:["The optional ",(0,i.jsx)(t.code,{children:"checkValid"})," parameter will throw an error if the field name is invalid"]}),"\n"]}),"\n",(0,i.jsx)(t.h4,{id:"getchildbyname",children:"getChildByName()"}),"\n",(0,i.jsx)(t.p,{children:"Retrieves a single field value by name:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-dart",children:"// Get the 'value' field from an Age object\nfinal value = age.getChildByName('value');\n"})}),"\n",(0,i.jsx)(t.p,{children:"This method will throw an error if the field contains multiple values."}),"\n",(0,i.jsx)(t.h4,{id:"setchildbyname",children:"setChildByName()"}),"\n",(0,i.jsx)(t.p,{children:"Updates a field by name and returns a new instance with the updated value:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-dart",children:"// Set the 'value' field on an Age object\nfinal newAge = age.setChildByName('value', FhirDecimal(10));\n"})}),"\n",(0,i.jsx)(t.h4,{id:"typebyelementname",children:"typeByElementName()"}),"\n",(0,i.jsx)(t.p,{children:"Returns the Dart type(s) that a field can contain:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-dart",children:"// Get the type of the 'value' field\nfinal valueType = age.typeByElementName('value');\n// Result: ['FhirDecimal']\n"})}),"\n",(0,i.jsx)(t.p,{children:"For polymorphic fields, this method may return multiple possible types."}),"\n",(0,i.jsx)(t.h3,{id:"object-manipulation-methods",children:"Object Manipulation Methods"}),"\n",(0,i.jsx)(t.h4,{id:"createproperty",children:"createProperty()"}),"\n",(0,i.jsx)(t.p,{children:"Creates an empty object at a specified field location, primarily used in FHIR mapping operations:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-dart",children:"// Create an empty 'unit' property\nfinal ageWithUnit = age.createProperty('unit');\n"})}),"\n",(0,i.jsx)(t.h4,{id:"clear",children:"clear()"}),"\n",(0,i.jsxs)(t.p,{children:["Clears specific fields by setting them to null. This method is necessary because ",(0,i.jsx)(t.code,{children:"copyWith()"})," cannot directly set fields to null:"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-dart",children:"// Clear the 'unit' and 'code' fields\nfinal clearedAge = age.clear(unit: true, code: true);\n"})}),"\n",(0,i.jsx)(t.h4,{id:"copywith",children:"copyWith()"}),"\n",(0,i.jsx)(t.p,{children:"Creates a new instance with specific fields updated:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-dart",children:"// Create a new Age object with updated value\nfinal updatedAge = age.copyWith(\n  value: FhirDecimal(5),\n  unit: FhirString('years'),\n);\n"})}),"\n",(0,i.jsx)(t.h4,{id:"equalsdeep",children:"equalsDeep()"}),"\n",(0,i.jsx)(t.p,{children:"Performs a deep comparison between two instances, checking if all field values are equal:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-dart",children:"// Check if two Age objects are deeply equal\nfinal areEqual = age1.equalsDeep(age2);\n"})}),"\n",(0,i.jsx)(t.h2,{id:"usage-example",children:"Usage Example"}),"\n",(0,i.jsx)(t.p,{children:"Here's how these utility methods might be used together:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-dart",children:"final age = Age(\n  value: FhirDecimal(65),\n  unit: FhirString('years'),\n  system: FhirUri('http://unitsofmeasure.org'),\n  code: FhirCode('a'),\n);\n\n// Get the FHIR type\nprint(age.fhirType); // Output: Age\n\n// Get the value field\nfinal valueField = age.getChildByName('value');\nprint(valueField?.toString()); // Output: 65\n\n// Update a field by name\nfinal updatedAge = age.setChildByName('unit', FhirString('months')) as Age;\nprint(updatedAge.unit?.value); // Output: months\n\n// Clear a field\nfinal clearedAge = age.clear(system: true);\nprint(clearedAge.system); // Output: null\n"})}),"\n",(0,i.jsx)(t.p,{children:"These utility methods allow for dynamic and flexible manipulation of FHIR resources, even without traditional reflection capabilities."})]})}function h(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(o,{...e})}):o(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>r,x:()=>s});var i=n(6540);const a={},l=i.createContext(a);function r(e){const t=i.useContext(l);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function s(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:r(e.components),i.createElement(l.Provider,{value:t},e.children)}}}]);