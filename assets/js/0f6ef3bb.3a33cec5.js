"use strict";(self.webpackChunkfhir_fli_documentation=self.webpackChunkfhir_fli_documentation||[]).push([[179],{6873:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>l,contentTitle:()=>o,default:()=>u,frontMatter:()=>s,metadata:()=>a,toc:()=>c});var i=n(4848),t=n(8453);const s={id:"fhir_r4_bulk",title:"Bulk Data"},o="FHIR Bulk Operations",a={id:"fhir_r4_bulk",title:"Bulk Data",description:"The fhirr4bulk library provides tools for working with FHIR bulk data operations, including import, export, and NDJSON file handling. This library is particularly useful for working with large datasets in FHIR, supporting the standard FHIR bulk operations ($export and $import).",source:"@site/docs/fhir_r4_bulk.md",sourceDirName:".",slug:"/fhir_r4_bulk",permalink:"/fhir_fli_documentation/docs/fhir_r4_bulk",draft:!1,unlisted:!1,editUrl:"https://github.com/fhir-fli/fhir_fli_documentation/tree/main/docs/fhir_r4_bulk.md",tags:[],version:"current",frontMatter:{id:"fhir_r4_bulk",title:"Bulk Data"},sidebar:"tutorialSidebar",previous:{title:"Database Package",permalink:"/fhir_fli_documentation/docs/fhir_r4_db"},next:{title:"FHIRPath Package",permalink:"/fhir_fli_documentation/docs/fhir_r4_path"}},l={},c=[{value:"Installation",id:"installation",level:2},{value:"Key Features",id:"key-features",level:2},{value:"NDJSON Operations",id:"ndjson-operations",level:2},{value:"Working with Files",id:"working-with-files",level:3},{value:"Creating Compressed Files",id:"creating-compressed-files",level:3},{value:"Bulk Export",id:"bulk-export",level:2},{value:"Export Options",id:"export-options",level:3},{value:"Handling Results",id:"handling-results",level:3},{value:"Bulk Import",id:"bulk-import",level:2},{value:"Performance Considerations",id:"performance-considerations",level:2},{value:"Error Handling",id:"error-handling",level:2},{value:"Conclusion",id:"conclusion",level:2}];function d(e){const r={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(r.h1,{id:"fhir-bulk-operations",children:"FHIR Bulk Operations"}),"\n",(0,i.jsxs)(r.p,{children:["The ",(0,i.jsx)(r.code,{children:"fhir_r4_bulk"})," library provides tools for working with FHIR bulk data operations, including import, export, and NDJSON file handling. This library is particularly useful for working with large datasets in FHIR, supporting the standard FHIR bulk operations (",(0,i.jsx)(r.a,{href:"https://hl7.org/fhir/uv/bulkdata/export.html",children:"$export"})," and ",(0,i.jsx)(r.a,{href:"https://hl7.org/fhir/uv/bulkdata/import/index.html",children:"$import"}),")."]}),"\n",(0,i.jsx)(r.h2,{id:"installation",children:"Installation"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-yaml",children:"dependencies:\n  fhir_r4_bulk: ^0.3.0\n  fhir_r4: ^0.3.0\n"})}),"\n",(0,i.jsx)(r.h2,{id:"key-features",children:"Key Features"}),"\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsx)(r.li,{children:"Convert between FHIR resources and NDJSON format"}),"\n",(0,i.jsx)(r.li,{children:"Handle compressed files (zip, tar.gz, gzip)"}),"\n",(0,i.jsx)(r.li,{children:"Execute FHIR Bulk Data Export operations ($export)"}),"\n",(0,i.jsx)(r.li,{children:"Execute FHIR Bulk Data Import operations ($import)"}),"\n"]}),"\n",(0,i.jsx)(r.h2,{id:"ndjson-operations",children:"NDJSON Operations"}),"\n",(0,i.jsxs)(r.p,{children:["NDJSON (Newline Delimited JSON) is the standard format for FHIR bulk data. The ",(0,i.jsx)(r.code,{children:"FhirBulk"})," class provides utilities for converting between FHIR resources and NDJSON:"]}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-dart",children:"import 'package:fhir_r4/fhir_r4.dart';\nimport 'package:fhir_r4_bulk/fhir_r4_bulk.dart';\n\n// Convert resources to NDJSON\nfinal resources = <Resource>[patient1, patient2, observation1];\nfinal ndjsonString = FhirBulk.toNdJson(resources);\n\n// Convert NDJSON to resources\nfinal parsedResources = FhirBulk.fromNdJson(ndjsonString);\n"})}),"\n",(0,i.jsx)(r.h3,{id:"working-with-files",children:"Working with Files"}),"\n",(0,i.jsx)(r.p,{children:"The library supports reading and writing NDJSON files:"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-dart",children:"// Read NDJSON from a file\nfinal resources = await FhirBulk.fromFile('/path/to/patients.ndjson');\n\n// Read from compressed files\nfinal resourcesFromZip = await FhirBulk.fromCompressedFile('/path/to/data.zip');\nfinal resourcesFromGz = await FhirBulk.fromCompressedFile('/path/to/data.gz');\nfinal resourcesFromTarGz = await FhirBulk.fromCompressedFile('/path/to/data.tar.gz');\n"})}),"\n",(0,i.jsx)(r.h3,{id:"creating-compressed-files",children:"Creating Compressed Files"}),"\n",(0,i.jsx)(r.p,{children:"You can also create compressed NDJSON files:"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-dart",children:"// Create a map of resource type -> NDJSON content\nfinal ndJsonMap = {\n  'Patient': FhirBulk.toNdJson(patients),\n  'Observation': FhirBulk.toNdJson(observations),\n};\n\n// Create a ZIP file\nfinal zipBytes = await FhirBulk.toZipFile(ndJsonMap);\n\n// Create a GZIP file\nfinal gzipBytes = FhirBulk.toGZipFile(ndJsonMap);\n\n// Create a TAR.GZ file\nfinal tarGzBytes = await FhirBulk.toTarGzFile(ndJsonMap);\n\n// Write to a file\nawait File('export.zip').writeAsBytes(zipBytes!);\n"})}),"\n",(0,i.jsx)(r.h2,{id:"bulk-export",children:"Bulk Export"}),"\n",(0,i.jsxs)(r.p,{children:["The FHIR Bulk Data Export operation (",(0,i.jsx)(r.code,{children:"$export"}),") allows you to retrieve large amounts of data from a FHIR server. The library supports three types of export:"]}),"\n",(0,i.jsxs)(r.ol,{children:["\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.strong,{children:"System-level export"})," - Export data for all patients"]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.strong,{children:"Group-level export"})," - Export data for patients in a specific group"]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.strong,{children:"Patient-level export"})," - Export data for all patients"]}),"\n"]}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-dart",children:"import 'package:fhir_r4/fhir_r4.dart';\nimport 'package:fhir_r4_bulk/fhir_r4_bulk.dart';\n\n// System-level export\nfinal systemRequest = BulkRequestSystem(\n  base: Uri.parse('https://example.com/fhir'),\n  since: FhirDateTime('2023-01-01'),\n  types: [\n    WhichResource(R4ResourceType.Patient),\n    WhichResource(R4ResourceType.Observation),\n  ],\n  headers: {'Authorization': 'Bearer token'},\n);\n\n// Group-level export\nfinal groupRequest = BulkRequestGroup(\n  base: Uri.parse('https://example.com/fhir'),\n  id: FhirId('diabetes-group'),\n  types: [\n    WhichResource(R4ResourceType.Patient),\n    WhichResource(R4ResourceType.Observation),\n  ],\n);\n\n// Patient-level export\nfinal patientRequest = BulkRequestPatient(\n  base: Uri.parse('https://example.com/fhir'),\n  types: [\n    WhichResource(R4ResourceType.Observation),\n    WhichResource(R4ResourceType.MedicationRequest),\n  ],\n);\n\n// Execute the request (choose one)\nfinal resources = await systemRequest.request();\n"})}),"\n",(0,i.jsx)(r.h3,{id:"export-options",children:"Export Options"}),"\n",(0,i.jsx)(r.p,{children:"The export operation supports several options:"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-dart",children:"// Advanced options\nfinal request = BulkRequestSystem(\n  base: Uri.parse('https://example.com/fhir'),\n  // Only include resources updated since this date\n  since: FhirDateTime('2023-01-01'),\n  // Specific resource types to include\n  types: [WhichResource(R4ResourceType.Patient)],\n  // Additional filters (server-dependent)\n  typeFilters: ['Patient?gender=female'],\n  // Change output format (default is NDJSON)\n  outputFormat: 'application/fhir+ndjson',\n  // Use HTTP POST instead of GET (newer servers)\n  useHttpPost: true,\n  // Add authorization or other headers\n  headers: {'Authorization': 'Bearer token'},\n);\n"})}),"\n",(0,i.jsx)(r.h3,{id:"handling-results",children:"Handling Results"}),"\n",(0,i.jsx)(r.p,{children:"The result is a list of FHIR resources:"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-dart",children:"final resources = await request.request();\n\n// Check for errors (OperationOutcome)\nfor (final resource in resources) {\n  if (resource is OperationOutcome) {\n    print('Error: ${resource.issue?.first.diagnostics?.value}');\n  }\n}\n\n// Process resources by type\nfinal patients = resources.whereType<Patient>();\nfinal observations = resources.whereType<Observation>();\n\nprint('Exported ${patients.length} patients');\nprint('Exported ${observations.length} observations');\n"})}),"\n",(0,i.jsx)(r.h2,{id:"bulk-import",children:"Bulk Import"}),"\n",(0,i.jsxs)(r.p,{children:["The FHIR Bulk Data Import operation (",(0,i.jsx)(r.code,{children:"$import"}),") allows you to load large amounts of data into a FHIR server:"]}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-dart",children:"import 'package:fhir_r4/fhir_r4.dart';\nimport 'package:fhir_r4_bulk/fhir_r4_bulk.dart';\n\n// Define the NDJSON files to import\nfinal importFiles = [\n  ImportFile(\n    resourceType: R4ResourceType.Patient,\n    url: Uri.parse('https://example.com/patients.ndjson'),\n  ),\n  ImportFile(\n    resourceType: R4ResourceType.Observation,\n    url: Uri.parse('https://example.com/observations.ndjson'),\n  ),\n];\n\n// Create the import request\nfinal importRequest = BulkImportRequest(\n  base: Uri.parse('https://example.com/fhir'),\n  files: importFiles,\n  // Optional source information\n  inputSource: 'https://source-system.org',\n  // If the NDJSON files require authentication\n  credentialHttpBasic: 'username:password',\n  // Control the batch size\n  maxBatchResourceCount: 1000,\n  // Add authorization or other headers\n  headers: {'Authorization': 'Bearer token'},\n);\n\n// Execute the import\nfinal outcome = await importRequest.importData();\n\n// Check the outcome\nif (outcome.issue != null && outcome.issue!.isNotEmpty) {\n  // The operation outcome typically contains a job ID in the diagnostics\n  final jobId = outcome.issue!.first.diagnostics?.value;\n  print('Import job started with ID: $jobId');\n}\n"})}),"\n",(0,i.jsxs)(r.p,{children:["The server typically responds with an ",(0,i.jsx)(r.code,{children:"OperationOutcome"})," containing a job ID that you can use to poll for status."]}),"\n",(0,i.jsx)(r.h2,{id:"performance-considerations",children:"Performance Considerations"}),"\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsx)(r.li,{children:"Bulk operations are designed for large datasets"}),"\n",(0,i.jsx)(r.li,{children:"The NDJSON processing is memory-efficient, handling resources one at a time"}),"\n",(0,i.jsx)(r.li,{children:"For very large files, consider streaming approaches when possible"}),"\n",(0,i.jsx)(r.li,{children:"The library automatically handles paginated responses from servers"}),"\n"]}),"\n",(0,i.jsx)(r.h2,{id:"error-handling",children:"Error Handling"}),"\n",(0,i.jsxs)(r.p,{children:["Both import and export operations return FHIR ",(0,i.jsx)(r.code,{children:"OperationOutcome"})," resources in case of errors:"]}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-dart",children:"final resources = await bulkRequest.request();\n\n// Check for errors\nfor (final resource in resources) {\n  if (resource is OperationOutcome) {\n    for (final issue in resource.issue ?? []) {\n      print('Error: ${issue.severity?.value} - ${issue.diagnostics?.value}');\n    }\n  }\n}\n"})}),"\n",(0,i.jsx)(r.h2,{id:"conclusion",children:"Conclusion"}),"\n",(0,i.jsxs)(r.p,{children:["The ",(0,i.jsx)(r.code,{children:"fhir_r4_bulk"})," library provides comprehensive support for FHIR bulk data operations, making it easier to work with large FHIR datasets in Dart and Flutter applications. Whether you're extracting data from a server or loading data into one, this library provides the tools you need to work efficiently with FHIR bulk data."]})]})}function u(e={}){const{wrapper:r}={...(0,t.R)(),...e.components};return r?(0,i.jsx)(r,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},8453:(e,r,n)=>{n.d(r,{R:()=>o,x:()=>a});var i=n(6540);const t={},s=i.createContext(t);function o(e){const r=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function a(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:o(e.components),i.createElement(s.Provider,{value:r},e.children)}}}]);