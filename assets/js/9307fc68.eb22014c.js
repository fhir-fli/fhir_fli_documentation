"use strict";(self.webpackChunkfhir_fli_documentation=self.webpackChunkfhir_fli_documentation||[]).push([[559],{6606:(n,e,i)=>{i.r(e),i.d(e,{assets:()=>l,contentTitle:()=>t,default:()=>u,frontMatter:()=>a,metadata:()=>o,toc:()=>c});var s=i(4848),r=i(8453);const a={id:"enums",title:"Enums"},t="Enums",o={id:"core/enums",title:"Enums",description:"Understanding FHIR Code Enums",source:"@site/docs/core/enums.md",sourceDirName:"core",slug:"/core/enums",permalink:"/fhir_fli_documentation/docs/core/enums",draft:!1,unlisted:!1,editUrl:"https://github.com/fhir-fli/fhir_fli_documentation/tree/main/docs/core/enums.md",tags:[],version:"current",frontMatter:{id:"enums",title:"Enums"},sidebar:"tutorialSidebar",previous:{title:"Primitive Types",permalink:"/fhir_fli_documentation/docs/core/primitive_types"},next:{title:"At Rest Package",permalink:"/fhir_fli_documentation/docs/at_rest/fhir_r4_at_rest"}},l={},c=[{value:"Understanding FHIR Code Enums",id:"understanding-fhir-code-enums",level:2},{value:"Core Architecture",id:"core-architecture",level:2},{value:"Using FHIR Code Enums",id:"using-fhir-code-enums",level:2},{value:"Accessing Predefined Values",id:"accessing-predefined-values",level:3},{value:"Using Native Dart Enums",id:"using-native-dart-enums",level:3},{value:"Creating Custom Instances",id:"creating-custom-instances",level:3},{value:"Working with Resources",id:"working-with-resources",level:3},{value:"Comparing Values",id:"comparing-values",level:3},{value:"Enhanced Conditional Logic",id:"enhanced-conditional-logic",level:3},{value:"Structure of a FHIR Code Enum Class",id:"structure-of-a-fhir-code-enum-class",level:2},{value:"Serialization and Deserialization",id:"serialization-and-deserialization",level:2},{value:"Advanced Usage",id:"advanced-usage",level:2},{value:"Element-Only Instances",id:"element-only-instances",level:3},{value:"Dynamic Creation",id:"dynamic-creation",level:3},{value:"Value Validation",id:"value-validation",level:3},{value:"Best Practices",id:"best-practices",level:2},{value:"Comparison with Previous FHIR-FLI Approach",id:"comparison-with-previous-fhir-fli-approach",level:2},{value:"Comparison with Standard Dart Enums",id:"comparison-with-standard-dart-enums",level:2},{value:"Working with Unknown or Extended Codes",id:"working-with-unknown-or-extended-codes",level:2},{value:"Conclusion",id:"conclusion",level:2}];function d(n){const e={code:"code",h1:"h1",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,r.R)(),...n.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(e.h1,{id:"enums",children:"Enums"}),"\n",(0,s.jsx)(e.h2,{id:"understanding-fhir-code-enums",children:"Understanding FHIR Code Enums"}),"\n",(0,s.jsxs)(e.p,{children:['In FHIR, many resources and data types include fields that are restricted to specific coded values (enumerations). FHIR-FLI implements these as "code enums" - specialized ',(0,s.jsx)(e.code,{children:"FhirCode"})," subclasses that combine the flexibility of FHIR's coded values with the type safety of Dart's enum pattern."]}),"\n",(0,s.jsx)(e.p,{children:"FHIR-FLI provides two complementary approaches to enums:"}),"\n",(0,s.jsxs)(e.ol,{children:["\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"FHIR Code Enum Classes"})," - ",(0,s.jsx)(e.code,{children:"FhirCodeEnum"})," subclasses with static values and FHIR metadata"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Native Dart Enums"})," - Standard Dart enums paired with FHIR Code Enum classes for maximum flexibility"]}),"\n"]}),"\n",(0,s.jsx)(e.p,{children:"This dual approach gives you both the rich metadata of FHIR coded values and the convenience of Dart's native enum pattern, including full support for switch statements."}),"\n",(0,s.jsx)(e.h2,{id:"core-architecture",children:"Core Architecture"}),"\n",(0,s.jsxs)(e.p,{children:["FHIR code enums extend the ",(0,s.jsx)(e.code,{children:"FhirCodeEnum"})," class, which itself extends ",(0,s.jsx)(e.code,{children:"FhirCode"}),". This gives them all the capabilities of primitive types while adding enum-like behavior."]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-dart",children:"abstract class FhirCodeEnum extends FhirCode {\n  // Base implementation\n}\n\nclass ActionGroupingBehavior extends FhirCodeEnum {\n  // Specific implementation with both approaches\n}\n"})}),"\n",(0,s.jsx)(e.h2,{id:"using-fhir-code-enums",children:"Using FHIR Code Enums"}),"\n",(0,s.jsx)(e.h3,{id:"accessing-predefined-values",children:"Accessing Predefined Values"}),"\n",(0,s.jsx)(e.p,{children:"Each code enum class provides static values that correspond to the codes defined in the FHIR specification:"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-dart",children:"// Access predefined values\nfinal groupingBehavior = ActionGroupingBehavior.visualGroup;\nfinal appointmentStatus = AppointmentStatus.booked;\n\n// Access the code's string value\nprint(groupingBehavior.valueString);  // 'visual-group'\n\n// Access additional metadata\nprint(groupingBehavior.display?.value);  // 'Visual Group'\nprint(groupingBehavior.system?.value);   // 'http://hl7.org/fhir/ValueSet/action-grouping-behavior'\n"})}),"\n",(0,s.jsx)(e.h3,{id:"using-native-dart-enums",children:"Using Native Dart Enums"}),"\n",(0,s.jsxs)(e.p,{children:["Each FHIR code enum class is now paired with a native Dart enum, accessible via the ",(0,s.jsx)(e.code,{children:"valueEnum"})," property:"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-dart",children:"// Access the native enum value\nfinal nativeEnum = ActionGroupingBehavior.visualGroup.valueEnum;  // ActionGroupingBehaviorEnum.visualGroup\n\n// Use in switch statements\nswitch (nativeEnum) {\n  case ActionGroupingBehaviorEnum.visualGroup:\n    // Handle visual group\n    break;\n  case ActionGroupingBehaviorEnum.logicalGroup:\n    // Handle logical group\n    break;\n  case ActionGroupingBehaviorEnum.sentenceGroup:\n    // Handle sentence group\n    break;\n}\n"})}),"\n",(0,s.jsx)(e.h3,{id:"creating-custom-instances",children:"Creating Custom Instances"}),"\n",(0,s.jsx)(e.p,{children:"You can still create custom instances when needed:"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-dart",children:"// Create a custom value\nfinal customBehavior = ActionGroupingBehavior(\n  'custom-behavior',\n  display: FhirString('Custom Grouping Behavior'),\n  system: FhirUri('http://example.org/custom-behaviors'),\n);\n\n// Note: Custom instances will have valueEnum == null since they don't match predefined enums\n"})}),"\n",(0,s.jsx)(e.h3,{id:"working-with-resources",children:"Working with Resources"}),"\n",(0,s.jsx)(e.p,{children:"Code enums can be directly assigned to appropriate resource fields:"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-dart",children:"final appointment = Appointment(\n  status: AppointmentStatus.booked,\n  // other fields...\n);\n"})}),"\n",(0,s.jsx)(e.h3,{id:"comparing-values",children:"Comparing Values"}),"\n",(0,s.jsx)(e.p,{children:"When comparing code enums, you can use the equality operator to check for value equality:"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-dart",children:"if (appointment.status == AppointmentStatus.booked) {\n  // Handle booked appointment\n}\n"})}),"\n",(0,s.jsx)(e.h3,{id:"enhanced-conditional-logic",children:"Enhanced Conditional Logic"}),"\n",(0,s.jsx)(e.p,{children:"The native enum integration enables more idiomatic Dart patterns:"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-dart",children:"// Traditional approach with equality checks\nif (behavior == ActionGroupingBehavior.visualGroup) {\n  // Handle visual group\n} else if (behavior == ActionGroupingBehavior.logicalGroup) {\n  // Handle logical group\n}\n\n// String value approach\nswitch (behavior.valueString) {\n  case 'visual-group':\n    // Handle visual group\n    break;\n  case 'logical-group':\n    // Handle logical group\n    break;\n  default:\n    // Handle other cases\n}\n\n// NEW: Native enum approach with switch statements\nswitch (behavior.valueEnum) {\n  case ActionGroupingBehaviorEnum.visualGroup:\n    // Handle visual group\n    break;\n  case ActionGroupingBehaviorEnum.logicalGroup:\n    // Handle logical group\n    break;\n  case ActionGroupingBehaviorEnum.sentenceGroup:\n    // Handle sentence group\n    break;\n  case null:\n    // Handle custom or unknown values\n    break;\n}\n"})}),"\n",(0,s.jsx)(e.h2,{id:"structure-of-a-fhir-code-enum-class",children:"Structure of a FHIR Code Enum Class"}),"\n",(0,s.jsx)(e.p,{children:"Each FHIR code enum class now follows an enhanced pattern that includes a native Dart enum:"}),"\n",(0,s.jsxs)(e.ol,{children:["\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Native Dart Enum"}),": Standard Dart enum for the coded values"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Private Constructor"}),": Used internally for the FHIR code enum class"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Public Factory"}),": For custom creation"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Static Const Values"}),": For each predefined code"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Values List"}),": Containing all predefined values"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Helper Methods"}),": For cloning, modification, etc."]}),"\n"]}),"\n",(0,s.jsx)(e.p,{children:"Here's a simplified example based on the implementation:"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-dart",children:"// Part 1: Native Dart Enum\nenum ActionGroupingBehaviorEnum {\n  visualGroup,\n  logicalGroup,\n  sentenceGroup;\n\n  String toJson() => toString();\n\n  @override\n  String toString() {\n    switch (this) {\n      case ActionGroupingBehaviorEnum.visualGroup:\n        return 'visual-group';\n      case ActionGroupingBehaviorEnum.logicalGroup:\n        return 'logical-group';\n      case ActionGroupingBehaviorEnum.sentenceGroup:\n        return 'sentence-group';\n    }\n  }\n\n  static ActionGroupingBehaviorEnum? fromJson(dynamic json) {\n    // Implementation\n  }\n\n  static ActionGroupingBehaviorEnum? fromString(String? value) {\n    // Implementation\n  }\n}\n\n// Part 2: FHIR Code Enum Class\nclass ActionGroupingBehavior extends FhirCodeEnum {\n  // Private constructor\n  const ActionGroupingBehavior._({\n    required super.valueString,\n    this.valueEnum,\n    super.system,\n    super.version,\n    super.display,\n    super.element,\n    // Other fields\n  }) : super._();\n\n  // Public factory\n  factory ActionGroupingBehavior(\n    String? rawValue, {\n    FhirUri? system,\n    FhirString? version,\n    FhirString? display,\n    // Other parameters\n  }) {\n    final valueString = \n        rawValue != null ? FhirCode._validateCode(rawValue) : null;\n    final valueEnum = ActionGroupingBehaviorEnum.fromString(valueString);\n    \n    return ActionGroupingBehavior._(\n      valueString: valueString,\n      valueEnum: valueEnum,\n      system: system,\n      version: version,\n      display: display,\n      // Other fields\n    );\n  }\n\n  // Native enum reference\n  final ActionGroupingBehaviorEnum? valueEnum;\n\n  // Predefined static const values\n  static const ActionGroupingBehavior visualGroup = ActionGroupingBehavior._(\n    valueString: 'visual-group',\n    valueEnum: ActionGroupingBehaviorEnum.visualGroup,\n    system: FhirUri._(\n      valueString: 'http://hl7.org/fhir/ValueSet/action-grouping-behavior',\n    ),\n    version: FhirString._(valueString: '4.3.0'),\n    display: FhirString._(\n      valueString: 'Visual Group',\n    ),\n  );\n\n  // Other predefined values\n  static const ActionGroupingBehavior logicalGroup = /* ... */;\n  static const ActionGroupingBehavior sentenceGroup = /* ... */;\n\n  // Values list\n  static final List<ActionGroupingBehavior> values = [\n    visualGroup,\n    logicalGroup,\n    sentenceGroup,\n  ];\n\n  // Helper methods\n  // ...\n}\n"})}),"\n",(0,s.jsx)(e.h2,{id:"serialization-and-deserialization",children:"Serialization and Deserialization"}),"\n",(0,s.jsx)(e.p,{children:"FHIR code enums are serialized and deserialized like other FHIR primitives, with support for element extensions:"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-dart",children:"// Serialization\nfinal json = groupingBehavior.toJson();\n// {\n//   'value': 'visual-group',\n//   '_value': { ... } // If element extensions exist\n// }\n\n// Deserialization\nfinal fromJson = ActionGroupingBehavior.fromJson({\n  'value': 'visual-group',\n  '_value': { ... } // Optional element extensions\n});\n\n// The fromJson factory also sets the corresponding valueEnum\nfinal enumValue = fromJson.valueEnum;  // ActionGroupingBehaviorEnum.visualGroup\n"})}),"\n",(0,s.jsx)(e.h2,{id:"advanced-usage",children:"Advanced Usage"}),"\n",(0,s.jsx)(e.h3,{id:"element-only-instances",children:"Element-Only Instances"}),"\n",(0,s.jsx)(e.p,{children:"Like other primitive types, code enums support element-only instances for carrying extensions without a value:"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-dart",children:"// Create an element-only instance\nfinal elementOnly = ActionGroupingBehavior(null, element: Element(/* ... */));\n\n// Add extensions\nfinal withExtensions = elementOnly.withElement(\n  Element(\n    extension_: [\n      FhirExtension(\n        url: FhirUri('http://example.org/my-extension'),\n        valueString: FhirString('Extension value'),\n      ),\n    ],\n  ),\n);\n"})}),"\n",(0,s.jsx)(e.h3,{id:"dynamic-creation",children:"Dynamic Creation"}),"\n",(0,s.jsx)(e.p,{children:"In some cases, you might need to create a code enum value dynamically based on user input or other sources:"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-dart",children:"// From a string value\nfinal userInput = getUserInput();  // Returns a string\nfinal userBehavior = ActionGroupingBehavior(userInput);\n\n// Check against known values\nif (userBehavior.valueEnum != null) {\n  // Matches a predefined enum value\n} else {\n  // Custom value not in the standard set\n}\n"})}),"\n",(0,s.jsx)(e.h3,{id:"value-validation",children:"Value Validation"}),"\n",(0,s.jsx)(e.p,{children:"When creating a custom instance, the input is validated according to FHIR's code validation rules:"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-dart",children:"// Valid code\nfinal valid = ActionGroupingBehavior('custom-valid-code');\n\n// Invalid code (contains spaces or special characters)\ntry {\n  final invalid = ActionGroupingBehavior('not a valid code');\n} catch (e) {\n  print('Validation error: $e');\n}\n"})}),"\n",(0,s.jsx)(e.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,s.jsxs)(e.ol,{children:["\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.strong,{children:"Use Predefined Values"})," whenever possible:"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-dart",children:"// Prefer this:\nfinal behavior = ActionGroupingBehavior.visualGroup;\n\n// Over this:\nfinal behavior = ActionGroupingBehavior('visual-group');\n"})}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.strong,{children:"Use Native Enums for Switch Statements"}),":"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-dart",children:"// Preferred approach\nswitch (behavior.valueEnum) {\n  case ActionGroupingBehaviorEnum.visualGroup:\n    // Handle visual group\n    break;\n  // More cases\n  case null:\n    // Handle custom/unknown values\n    break;\n}\n"})}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.strong,{children:"Check for Null"})," before accessing:"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-dart",children:"if (appointment.status?.valueEnum == AppointmentStatusEnum.booked) {\n  // Safe access with enum comparison\n}\n"})}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsxs)(e.p,{children:[(0,s.jsxs)(e.strong,{children:["Use ",(0,s.jsx)(e.code,{children:"values"})," List"]})," for validation or iteration:"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-dart",children:"// Check if value is a standard one\nif (ActionGroupingBehavior.values.contains(behavior)) {\n  // Standard value\n}\n\n// Iterate all possible values\nfor (final value in ActionGroupingBehavior.values) {\n  print('${value.valueString}: ${value.display?.value}');\n}\n"})}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.strong,{children:"Remember Extension Support"}),":"]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-dart",children:"// Accessing extensions works the same as other primitives\nfinal extensions = behavior.element?.extension_;\n"})}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(e.h2,{id:"comparison-with-previous-fhir-fli-approach",children:"Comparison with Previous FHIR-FLI Approach"}),"\n",(0,s.jsxs)(e.table,{children:[(0,s.jsx)(e.thead,{children:(0,s.jsxs)(e.tr,{children:[(0,s.jsx)(e.th,{children:"Feature"}),(0,s.jsx)(e.th,{children:"Current Approach"}),(0,s.jsx)(e.th,{children:"Previous Approach"})]})}),(0,s.jsxs)(e.tbody,{children:[(0,s.jsxs)(e.tr,{children:[(0,s.jsxs)(e.td,{children:["Use in ",(0,s.jsx)(e.code,{children:"switch"})]}),(0,s.jsxs)(e.td,{children:["Direct via ",(0,s.jsx)(e.code,{children:"valueEnum"})]}),(0,s.jsx)(e.td,{children:"By string value only"})]}),(0,s.jsxs)(e.tr,{children:[(0,s.jsx)(e.td,{children:"Type safety"}),(0,s.jsx)(e.td,{children:"Enhanced with native enums"}),(0,s.jsx)(e.td,{children:"Limited to equality checks"})]}),(0,s.jsxs)(e.tr,{children:[(0,s.jsx)(e.td,{children:"Additional metadata"}),(0,s.jsx)(e.td,{children:"Yes (system, display, etc.)"}),(0,s.jsx)(e.td,{children:"Yes (same)"})]}),(0,s.jsxs)(e.tr,{children:[(0,s.jsx)(e.td,{children:"Custom/dynamic values"}),(0,s.jsxs)(e.td,{children:["Yes, with ",(0,s.jsx)(e.code,{children:"valueEnum == null"})]}),(0,s.jsx)(e.td,{children:"Yes"})]}),(0,s.jsxs)(e.tr,{children:[(0,s.jsx)(e.td,{children:"Extension support"}),(0,s.jsx)(e.td,{children:"Yes"}),(0,s.jsx)(e.td,{children:"Yes"})]}),(0,s.jsxs)(e.tr,{children:[(0,s.jsx)(e.td,{children:"Memory efficiency"}),(0,s.jsx)(e.td,{children:"Similar"}),(0,s.jsx)(e.td,{children:"Similar"})]})]})]}),"\n",(0,s.jsx)(e.h2,{id:"comparison-with-standard-dart-enums",children:"Comparison with Standard Dart Enums"}),"\n",(0,s.jsxs)(e.table,{children:[(0,s.jsx)(e.thead,{children:(0,s.jsxs)(e.tr,{children:[(0,s.jsx)(e.th,{children:"Feature"}),(0,s.jsx)(e.th,{children:"FHIR Code Enums"}),(0,s.jsx)(e.th,{children:"Dart Native Enums Only"})]})}),(0,s.jsxs)(e.tbody,{children:[(0,s.jsxs)(e.tr,{children:[(0,s.jsx)(e.td,{children:"FHIR metadata"}),(0,s.jsx)(e.td,{children:"Yes"}),(0,s.jsx)(e.td,{children:"No"})]}),(0,s.jsxs)(e.tr,{children:[(0,s.jsx)(e.td,{children:"Custom/dynamic values"}),(0,s.jsx)(e.td,{children:"Yes"}),(0,s.jsx)(e.td,{children:"No"})]}),(0,s.jsxs)(e.tr,{children:[(0,s.jsx)(e.td,{children:"Extension support"}),(0,s.jsx)(e.td,{children:"Yes"}),(0,s.jsx)(e.td,{children:"No"})]}),(0,s.jsxs)(e.tr,{children:[(0,s.jsxs)(e.td,{children:["Use in ",(0,s.jsx)(e.code,{children:"switch"})]}),(0,s.jsxs)(e.td,{children:["Yes, via ",(0,s.jsx)(e.code,{children:"valueEnum"})]}),(0,s.jsx)(e.td,{children:"Yes"})]}),(0,s.jsxs)(e.tr,{children:[(0,s.jsx)(e.td,{children:"Memory footprint"}),(0,s.jsx)(e.td,{children:"Higher"}),(0,s.jsx)(e.td,{children:"Lower"})]})]})]}),"\n",(0,s.jsx)(e.h2,{id:"working-with-unknown-or-extended-codes",children:"Working with Unknown or Extended Codes"}),"\n",(0,s.jsx)(e.p,{children:"In some cases, you might encounter codes not defined in the standard FHIR value sets. FHIR-FLI allows you to handle these situations:"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-dart",children:"// Create a custom code value (will have valueEnum == null)\nfinal extendedBehavior = ActionGroupingBehavior(\n  'extended-behavior', \n  system: FhirUri('http://example.org/extended-behaviors'),\n  display: FhirString('Extended Grouping Behavior'),\n);\n\n// When receiving unknown values from external sources\ntry {\n  final unknownBehavior = ActionGroupingBehavior.fromJson({'value': 'unknown-value'});\n  // This will work as long as the value is a valid code format\n  // unknownBehavior.valueEnum will be null\n} catch (e) {\n  // Handle invalid code format\n}\n\n// Handling in switch statements\nswitch (behavior.valueEnum) {\n  case ActionGroupingBehaviorEnum.visualGroup:\n  case ActionGroupingBehaviorEnum.logicalGroup:\n  case ActionGroupingBehaviorEnum.sentenceGroup:\n    // Handle standard values\n    break;\n  case null:\n    // This branch handles custom/unknown values\n    // You can check behavior.valueString for specific custom values\n    if (behavior.valueString == 'extended-behavior') {\n      // Handle specific custom value\n    } else {\n      // Handle other unknown values\n    }\n    break;\n}\n"})}),"\n",(0,s.jsx)(e.h2,{id:"conclusion",children:"Conclusion"}),"\n",(0,s.jsxs)(e.p,{children:["FHIR-FLI's enhanced enum approach provides the best of both worlds: the rich metadata and flexibility of FHIR's coded values, combined with the type safety and convenience of Dart's native enum pattern. By pairing each ",(0,s.jsx)(e.code,{children:"FhirCodeEnum"})," class with a corresponding native Dart enum and exposing it via the ",(0,s.jsx)(e.code,{children:"valueEnum"})," property, you can write more idiomatic and maintainable Dart code while still fully supporting the FHIR standard."]})]})}function u(n={}){const{wrapper:e}={...(0,r.R)(),...n.components};return e?(0,s.jsx)(e,{...n,children:(0,s.jsx)(d,{...n})}):d(n)}},8453:(n,e,i)=>{i.d(e,{R:()=>t,x:()=>o});var s=i(6540);const r={},a=s.createContext(r);function t(n){const e=s.useContext(a);return s.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function o(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(r):n.components||r:t(n.components),s.createElement(a.Provider,{value:e},n.children)}}}]);