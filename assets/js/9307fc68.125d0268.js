"use strict";(self.webpackChunkfhir_fli_documentation=self.webpackChunkfhir_fli_documentation||[]).push([[559],{6606:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>l,contentTitle:()=>r,default:()=>u,frontMatter:()=>a,metadata:()=>c,toc:()=>d});var t=s(4848),i=s(8453);const a={id:"enums",title:"Enums"},r='"Enums"',c={id:"core/enums",title:"Enums",description:"Understanding FHIR Code Enums",source:"@site/docs/core/enums.md",sourceDirName:"core",slug:"/core/enums",permalink:"/fhir_fli_documentation/docs/core/enums",draft:!1,unlisted:!1,editUrl:"https://github.com/fhir-fli/fhir_fli_documentation/tree/main/docs/core/enums.md",tags:[],version:"current",frontMatter:{id:"enums",title:"Enums"},sidebar:"tutorialSidebar",previous:{title:"Primitive Types",permalink:"/fhir_fli_documentation/docs/core/primitive_types"},next:{title:"At Rest Package",permalink:"/fhir_fli_documentation/docs/fhir_r4_at_rest"}},l={},d=[{value:"Understanding FHIR Code Enums",id:"understanding-fhir-code-enums",level:2},{value:"Core Architecture",id:"core-architecture",level:2},{value:"Using FHIR Code Enums",id:"using-fhir-code-enums",level:2},{value:"Accessing Predefined Values",id:"accessing-predefined-values",level:3},{value:"Creating Custom Instances",id:"creating-custom-instances",level:3},{value:"Working with Resources",id:"working-with-resources",level:3},{value:"Comparing Values",id:"comparing-values",level:3},{value:"In Conditional Logic",id:"in-conditional-logic",level:3},{value:"Structure of a FHIR Code Enum Class",id:"structure-of-a-fhir-code-enum-class",level:2},{value:"Serialization and Deserialization",id:"serialization-and-deserialization",level:2},{value:"Advanced Usage",id:"advanced-usage",level:2},{value:"Element-Only Instances",id:"element-only-instances",level:3},{value:"Dynamic Creation",id:"dynamic-creation",level:3},{value:"Value Validation",id:"value-validation",level:3},{value:"Best Practices",id:"best-practices",level:2},{value:"Common FHIR Code Enum Types",id:"common-fhir-code-enum-types",level:2},{value:"Limitations",id:"limitations",level:2},{value:"Working with Unknown or Extended Codes",id:"working-with-unknown-or-extended-codes",level:2},{value:"Comparison with Dart Enums",id:"comparison-with-dart-enums",level:2}];function o(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h1,{id:"enums",children:'"Enums"'}),"\n",(0,t.jsx)(n.h2,{id:"understanding-fhir-code-enums",children:"Understanding FHIR Code Enums"}),"\n",(0,t.jsxs)(n.p,{children:['In FHIR, many resources and data types include fields that are restricted to specific coded values (enumerations). FHIR-FLI implements these as "code enums" - specialized ',(0,t.jsx)(n.code,{children:"FhirCode"})," subclasses that combine the flexibility of FHIR's coded values with the convenience of Dart's enum pattern."]}),"\n",(0,t.jsx)(n.p,{children:"Unlike traditional Dart enums, FHIR code enums:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Are not ",(0,t.jsx)(n.code,{children:"const"})," (cannot be used directly in ",(0,t.jsx)(n.code,{children:"switch"})," statements)"]}),"\n",(0,t.jsx)(n.li,{children:"Contain additional FHIR metadata like system, version, and display text"}),"\n",(0,t.jsx)(n.li,{children:"Support serialization/deserialization with FHIR's element extensions"}),"\n",(0,t.jsx)(n.li,{children:"Can be created dynamically with custom values"}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"core-architecture",children:"Core Architecture"}),"\n",(0,t.jsxs)(n.p,{children:["FHIR code enums extend the ",(0,t.jsx)(n.code,{children:"FhirCodeEnum"})," class, which itself extends ",(0,t.jsx)(n.code,{children:"FhirCode"}),". This gives them all the capabilities of primitive types while adding enum-like behavior."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-dart",children:"abstract class FhirCodeEnum extends FhirCode {\n  // Base implementation\n}\n\nclass AccountStatus extends FhirCodeEnum {\n  // Specific implementation\n}\n"})}),"\n",(0,t.jsx)(n.h2,{id:"using-fhir-code-enums",children:"Using FHIR Code Enums"}),"\n",(0,t.jsx)(n.h3,{id:"accessing-predefined-values",children:"Accessing Predefined Values"}),"\n",(0,t.jsx)(n.p,{children:"Each code enum class provides static values that correspond to the codes defined in the FHIR specification:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-dart",children:"// Access predefined values\nfinal status = AccountStatus.active;\nfinal error = AccountStatus.entered_in_error;\n\n// Access the code's string value\nprint(status.valueString);  // 'active'\n\n// Access additional metadata\nprint(status.display?.value);  // 'Active'\nprint(status.system?.value);   // 'http://hl7.org/fhir/ValueSet/account-status'\n"})}),"\n",(0,t.jsx)(n.h3,{id:"creating-custom-instances",children:"Creating Custom Instances"}),"\n",(0,t.jsx)(n.p,{children:"You can also create custom instances when needed:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-dart",children:"// Create a custom value\nfinal customStatus = AccountStatus(\n  'temporary',\n  display: FhirString('Temporary Status'),\n  system: FhirUri('http://example.org/custom-statuses'),\n);\n"})}),"\n",(0,t.jsx)(n.h3,{id:"working-with-resources",children:"Working with Resources"}),"\n",(0,t.jsx)(n.p,{children:"Code enums can be directly assigned to appropriate resource fields:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-dart",children:"final account = Account(\n  status: AccountStatus.active,\n  // other fields...\n);\n"})}),"\n",(0,t.jsx)(n.h3,{id:"comparing-values",children:"Comparing Values"}),"\n",(0,t.jsx)(n.p,{children:"When comparing code enums, you can use the equality operator to check for value equality:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-dart",children:"if (account.status == AccountStatus.active) {\n  // Handle active account\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"in-conditional-logic",children:"In Conditional Logic"}),"\n",(0,t.jsxs)(n.p,{children:["Since code enums are not Dart ",(0,t.jsx)(n.code,{children:"const"})," enums, they cannot be used directly in ",(0,t.jsx)(n.code,{children:"switch"})," statements. Instead, you can:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-dart",children:"// Using if-else with the equality operator\nif (account.status == AccountStatus.active) {\n  // Handle active\n} else if (account.status == AccountStatus.inactive) {\n  // Handle inactive\n}\n\n// Using switch with string values\nswitch (account.status?.valueString) {\n  case 'active':\n    // Handle active\n    break;\n  case 'inactive':\n    // Handle inactive\n    break;\n  default:\n    // Handle other cases\n}\n"})}),"\n",(0,t.jsx)(n.h2,{id:"structure-of-a-fhir-code-enum-class",children:"Structure of a FHIR Code Enum Class"}),"\n",(0,t.jsx)(n.p,{children:"Each FHIR code enum class follows a consistent pattern:"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Private Constructor"}),": Used internally"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Public Factory"}),": For custom creation"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Static Final Values"}),": For each predefined code"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Values List"}),": Containing all predefined values"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Helper Methods"}),": For cloning, modification, etc."]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Here's a simplified example:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-dart",children:"class AccountStatus extends FhirCodeEnum {\n  // Private constructor\n  AccountStatus._({\n    required super.valueString,\n    super.system,\n    super.version,\n    super.display,\n    // ... other fields\n  }) : super._();\n\n  // Public factory\n  factory AccountStatus(\n    String? rawValue, {\n    FhirUri? system,\n    FhirString? version,\n    FhirString? display,\n    // ... other parameters\n  }) {\n    // Implementation\n  }\n\n  // Predefined values\n  static final AccountStatus active = AccountStatus._(\n    valueString: 'active',\n    system: 'http://hl7.org/fhir/ValueSet/account-status'.toFhirUri,\n    version: '4.3.0'.toFhirString,\n    display: 'Active'.toFhirString,\n  );\n\n  static final AccountStatus inactive = AccountStatus._(\n    valueString: 'inactive',\n    // ... other fields\n  );\n\n  // ... other predefined values\n\n  // Values list\n  static final List<AccountStatus> values = [\n    active,\n    inactive,\n    // ... other values\n  ];\n\n  // Helper methods\n  // ...\n}\n"})}),"\n",(0,t.jsx)(n.h2,{id:"serialization-and-deserialization",children:"Serialization and Deserialization"}),"\n",(0,t.jsx)(n.p,{children:"FHIR code enums are serialized and deserialized like other FHIR primitives, with support for element extensions:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-dart",children:"// Serialization\nfinal json = accountStatus.toJson();\n// {\n//   'value': 'active',\n//   '_value': { ... } // If element extensions exist\n// }\n\n// Deserialization\nfinal fromJson = AccountStatus.fromJson({\n  'value': 'active',\n  '_value': { ... } // Optional element extensions\n});\n"})}),"\n",(0,t.jsx)(n.h2,{id:"advanced-usage",children:"Advanced Usage"}),"\n",(0,t.jsx)(n.h3,{id:"element-only-instances",children:"Element-Only Instances"}),"\n",(0,t.jsx)(n.p,{children:"Like other primitive types, code enums support element-only instances for carrying extensions without a value:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-dart",children:"// Create an element-only instance\nfinal elementOnly = AccountStatus.elementOnly;\n\n// Add an element with extensions\nfinal withExtensions = elementOnly.withElement(\n  Element(\n    extension_: [\n      FhirExtension(\n        url: FhirUri('http://example.org/my-extension'),\n        valueString: FhirString('Extension value'),\n      ),\n    ],\n  ),\n);\n"})}),"\n",(0,t.jsx)(n.h3,{id:"dynamic-creation",children:"Dynamic Creation"}),"\n",(0,t.jsx)(n.p,{children:"In some cases, you might need to create a code enum value dynamically based on user input or other sources:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-dart",children:"// From a string value\nfinal userInput = getUserInput(); // Returns a string\nfinal userStatus = AccountStatus(userInput);\n\n// Check against known values\nif (AccountStatus.values.any((v) => v.valueString == userStatus.valueString)) {\n  // Valid predefined value\n} else {\n  // Custom value\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"value-validation",children:"Value Validation"}),"\n",(0,t.jsx)(n.p,{children:"When creating a custom instance, the input is validated according to FHIR's code validation rules:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-dart",children:"// Valid code\nfinal valid = AccountStatus('custom-valid-code');\n\n// Invalid code (contains spaces or special characters)\ntry {\n  final invalid = AccountStatus('not a valid code');\n} catch (e) {\n  print('Validation error: $e');\n}\n"})}),"\n",(0,t.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Use Predefined Values"})," whenever possible:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-dart",children:"// Prefer this:\nfinal status = AccountStatus.active;\n\n// Over this:\nfinal status = AccountStatus('active');\n"})}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"For Switch Statements"}),", use the string value:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-dart",children:"switch (status.valueString) {\n  case 'active':\n    // Handle active\n    break;\n  // More cases\n}\n"})}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Check for Null"})," before accessing:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-dart",children:"if (account.status?.valueString == 'active') {\n  // Safe access\n}\n"})}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsxs)(n.strong,{children:["Use ",(0,t.jsx)(n.code,{children:"values"})," List"]})," for validation or iteration:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-dart",children:"// Check if value is a standard one\nif (AccountStatus.values.contains(status)) {\n  // Standard value\n}\n\n// Iterate all possible values\nfor (final value in AccountStatus.values) {\n  print('${value.valueString}: ${value.display?.value}');\n}\n"})}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Remember Extension Support"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-dart",children:"// Accessing extensions works the same as other primitives\nfinal extensions = status.element?.extension_;\n"})}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"common-fhir-code-enum-types",children:"Common FHIR Code Enum Types"}),"\n",(0,t.jsx)(n.p,{children:"FHIR-FLI includes code enum classes for all coded value sets in FHIR, such as:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"AdministrativeGender"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"AppointmentStatus"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"ContactPointSystem"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"DeviceStatus"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"ObservationStatus"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"ResourceType"})}),"\n",(0,t.jsx)(n.li,{children:"And many more..."}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"limitations",children:"Limitations"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsxs)(n.strong,{children:["Not Dart ",(0,t.jsx)(n.code,{children:"const"})," Enums"]}),": Cannot be used directly in ",(0,t.jsx)(n.code,{children:"switch"})," statements or with Dart's enum utilities"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Memory Usage"}),": Having all predefined values as static fields can increase memory usage compared to true Dart enums"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Type Safety"}),": Custom values can be created that aren't part of the predefined set, requiring additional validation if strict conformance is needed"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"working-with-unknown-or-extended-codes",children:"Working with Unknown or Extended Codes"}),"\n",(0,t.jsx)(n.p,{children:"In some cases, you might encounter codes not defined in the standard FHIR value sets. FHIR-FLI allows you to handle these situations:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-dart",children:"// Create a custom code value\nfinal extendedStatus = AccountStatus(\n  'extended-status', \n  system: FhirUri('http://example.org/extended-statuses'),\n  display: FhirString('Extended Status'),\n);\n\n// When receiving unknown values from external sources\ntry {\n  final unknownStatus = AccountStatus.fromJson({'value': 'unknown-value'});\n  // This will work as long as the value is a valid code format\n} catch (e) {\n  // Handle invalid code format\n}\n"})}),"\n",(0,t.jsx)(n.h2,{id:"comparison-with-dart-enums",children:"Comparison with Dart Enums"}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Feature"}),(0,t.jsx)(n.th,{children:"FHIR Code Enums"}),(0,t.jsx)(n.th,{children:"Dart Native Enums"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"const"})}),(0,t.jsx)(n.td,{children:"No"}),(0,t.jsx)(n.td,{children:"Yes"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsxs)(n.td,{children:["Use in ",(0,t.jsx)(n.code,{children:"switch"})]}),(0,t.jsx)(n.td,{children:"By string value only"}),(0,t.jsx)(n.td,{children:"Direct"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"Additional metadata"}),(0,t.jsx)(n.td,{children:"Yes (system, display, etc.)"}),(0,t.jsx)(n.td,{children:"No"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"Custom/dynamic values"}),(0,t.jsx)(n.td,{children:"Yes"}),(0,t.jsx)(n.td,{children:"No"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"Extension support"}),(0,t.jsx)(n.td,{children:"Yes"}),(0,t.jsx)(n.td,{children:"No"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"Value validation"}),(0,t.jsx)(n.td,{children:"Yes"}),(0,t.jsx)(n.td,{children:"N/A"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"Memory footprint"}),(0,t.jsx)(n.td,{children:"Higher"}),(0,t.jsx)(n.td,{children:"Lower"})]})]})]})]})}function u(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(o,{...e})}):o(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>r,x:()=>c});var t=s(6540);const i={},a=t.createContext(i);function r(e){const n=t.useContext(a);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),t.createElement(a.Provider,{value:n},e.children)}}}]);