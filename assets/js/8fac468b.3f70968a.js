"use strict";(self.webpackChunkfhir_fli_documentation=self.webpackChunkfhir_fli_documentation||[]).push([[482],{6238:(e,t,i)=>{i.r(t),i.d(t,{assets:()=>c,contentTitle:()=>r,default:()=>h,frontMatter:()=>s,metadata:()=>a,toc:()=>d});var n=i(4848),o=i(8453);const s={id:"basic_object",title:"Basics of FHIR Classes"},r="FHIR Classes",a={id:"core/basic_object",title:"Basics of FHIR Classes",description:"These classes don't differ much from any other object oriented classes. If you want to create a patient for instance, you do it just like this:",source:"@site/docs/core/basic_object.md",sourceDirName:"core",slug:"/core/basic_object",permalink:"/fhir_fli_documentation/docs/core/basic_object",draft:!1,unlisted:!1,editUrl:"https://github.com/fhir-fli/fhir_fli_documentation/tree/main/docs/core/basic_object.md",tags:[],version:"current",frontMatter:{id:"basic_object",title:"Basics of FHIR Classes"},sidebar:"tutorialSidebar",previous:{title:"Core Package",permalink:"/fhir_fli_documentation/docs/core/fhir_r4"},next:{title:"Serialization/Deserialization",permalink:"/fhir_fli_documentation/docs/core/serialization"}},c={},d=[];function l(e){const t={a:"a",code:"code",h1:"h1",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.h1,{id:"fhir-classes",children:"FHIR Classes"}),"\n",(0,n.jsx)(t.p,{children:"These classes don't differ much from any other object oriented classes. If you want to create a patient for instance, you do it just like this:"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-dart",children:"final patient = Patient(\n    id: FhirString('123'),\n    name: [\n      HumanName(\n        family: 'Doe'.toFhirString,\n        given: ['John'.toFhirString],\n      ),\n    ],\n    birthDate: '1990-01-01'.toFhirDate,\n  );\n"})}),"\n",(0,n.jsxs)(t.p,{children:["And that's that. So a couple of things to mention. I liked freezed, but it doesn't play well with other code generators, and ends up producing a LOT of code. And while its very useful, I didn't think we needed all of it for this, so that's gone. I did still keep most of the important parts of freezed. All classes are immutable. They all have ",(0,n.jsx)(t.code,{children:"copyWith"})," functions. There are also some new functions, like ",(0,n.jsx)(t.code,{children:"getChildByName"})," and ",(0,n.jsx)(t.code,{children:"fromJsonString"})," which we'll discuss in more depth in ",(0,n.jsx)(t.a,{href:"docs/core/class_structure",children:"Class Structure"}),"."]}),"\n",(0,n.jsxs)(t.p,{children:["Another thing you'll notice, is that there are getters on all the primitive values. This is because FHIR puts requirements on what is considered a Url or a Date, or a DateTime and it doesn't usually align with Dart's perspective. Again, much more in-depth discussion in ",(0,n.jsx)(t.a,{href:"docs/core/primitive_types",children:"Primitive Types"}),". But for now, know that there are getters for almost all of Dart's primitive types to convert them into FHIR primitive types. So you can do ",(0,n.jsx)(t.code,{children:"FhirString('123')"})," like we did above for ",(0,n.jsx)(t.code,{children:"id"}),", OR you can just do ",(0,n.jsx)(t.code,{children:".toFhirString"})," like we did for the names."]})]})}function h(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(l,{...e})}):l(e)}},8453:(e,t,i)=>{i.d(t,{R:()=>r,x:()=>a});var n=i(6540);const o={},s=n.createContext(o);function r(e){const t=n.useContext(s);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:r(e.components),n.createElement(s.Provider,{value:t},e.children)}}}]);