"use strict";(self.webpackChunkfhir_fli_documentation=self.webpackChunkfhir_fli_documentation||[]).push([[769],{8163:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>c,contentTitle:()=>s,default:()=>u,frontMatter:()=>r,metadata:()=>o,toc:()=>l});var i=a(4848),t=a(8453);const r={id:"fhir_r4_db",title:"Database Package"},s="FHIR R4 Database",o={id:"fhir_r4_db",title:"Database Package",description:"The package for local storage of FHIR resources. The fhirr4db library provides a lightweight, encrypted local database solution for storing and managing FHIR resources in Flutter applications. Built as a wrapper around hive_ce, this library offers a simple, type-safe API for common database operations with specific optimizations for FHIR data.",source:"@site/docs/fhir_r4_db.md",sourceDirName:".",slug:"/fhir_r4_db",permalink:"/fhir_fli_documentation/docs/fhir_r4_db",draft:!1,unlisted:!1,editUrl:"https://github.com/fhir-fli/fhir_fli_documentation/tree/main/docs/fhir_r4_db.md",tags:[],version:"current",frontMatter:{id:"fhir_r4_db",title:"Database Package"},sidebar:"tutorialSidebar",previous:{title:"Parameters",permalink:"/fhir_fli_documentation/docs/at_rest/restful_parameters"},next:{title:"Bulk Data",permalink:"/fhir_fli_documentation/docs/fhir_r4_bulk"}},c={},l=[{value:"Installation",id:"installation",level:2},{value:"Key Features",id:"key-features",level:2},{value:"Initialization",id:"initialization",level:3},{value:"Basic Operations",id:"basic-operations",level:2},{value:"Saving Resources",id:"saving-resources",level:3},{value:"Reading Resources",id:"reading-resources",level:3},{value:"Searching Resources",id:"searching-resources",level:3},{value:"Deleting Resources",id:"deleting-resources",level:3},{value:"Advanced Features",id:"advanced-features",level:2},{value:"Resource Versioning and History",id:"resource-versioning-and-history",level:3},{value:"Syncing Support",id:"syncing-support",level:3},{value:"Reactive Database Updates",id:"reactive-database-updates",level:3},{value:"Working with Canonical Resources",id:"working-with-canonical-resources",level:3},{value:"General Storage",id:"general-storage",level:3},{value:"Encryption",id:"encryption",level:2},{value:"Performance Considerations",id:"performance-considerations",level:2},{value:"Example",id:"example",level:2},{value:"Benchmarking",id:"benchmarking",level:3}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h1,{id:"fhir-r4-database",children:"FHIR R4 Database"}),"\n",(0,i.jsxs)(n.p,{children:["The package for local storage of FHIR resources. The ",(0,i.jsx)(n.code,{children:"fhir_r4_db"})," library provides a lightweight, encrypted local database solution for storing and managing FHIR resources in Flutter applications. Built as a wrapper around ",(0,i.jsx)(n.code,{children:"hive_ce"}),", this library offers a simple, type-safe API for common database operations with specific optimizations for FHIR data."]}),"\n",(0,i.jsx)(n.h2,{id:"installation",children:"Installation"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:"dependencies:\n  fhir_r4_db: ^0.3.0\n  fhir_r4: ^0.3.0\n"})}),"\n",(0,i.jsx)(n.h2,{id:"key-features",children:"Key Features"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"In-memory performance"}),": Lightning-fast operations with minimal setup"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Always encrypted"}),": Data is secured by default with optional custom encryption"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Cross-platform"}),": Works on all platforms supported by Flutter without special configurations"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Version tracking"}),": Automatic versioning of resources with history support"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Reactive updates"}),": Stream-based API for observing database changes"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"FHIR-optimized"}),": Special handling for FHIR resources and canonical references"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"initialization",children:"Initialization"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-dart",children:"import 'package:fhir_r4_db/fhir_r4_db.dart';\n\n// Initialize the database without encryption\nawait FhirDb().init();\n\n// Or with a custom path and encryption key\nawait FhirDb().init(\n  path: 'path/to/db',\n  pw: 'your-encryption-key'\n);\n"})}),"\n",(0,i.jsx)(n.h2,{id:"basic-operations",children:"Basic Operations"}),"\n",(0,i.jsx)(n.h3,{id:"saving-resources",children:"Saving Resources"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-dart",children:"// Save a single resource\nfinal patient = Patient(\n  name: [\n    HumanName(\n      family: 'Doe'.toFhirString,\n      given: ['John'.toFhirString],\n    ),\n  ],\n);\n\n// The save method adds an ID if none exists and updates the meta fields\nfinal savedPatient = await FhirDb().save(resource: patient);\n\n// Save multiple resources\nfinal resources = [patient, observation, condition];\nawait FhirDb().saveAll(resources: resources);\n"})}),"\n",(0,i.jsx)(n.h3,{id:"reading-resources",children:"Reading Resources"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-dart",children:"// Retrieve a resource by type and ID\nfinal patient = await FhirDb().get(\n  resourceType: R4ResourceType.Patient,\n  id: '12345',\n);\n\n// Check if a resource exists\nfinal exists = await FhirDb().exists(\n  resourceType: R4ResourceType.Patient,\n  id: '12345',\n);\n"})}),"\n",(0,i.jsx)(n.h3,{id:"searching-resources",children:"Searching Resources"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-dart",children:"// Find resources by type and field value\nfinal patients = await FhirDb().find(\n  resourceType: R4ResourceType.Patient,\n  field: ['name', 0, 'family'],\n  value: 'Doe',\n);\n\n// Custom search with a finder function\nfinal activePatients = await FhirDb().search(\n  resourceType: R4ResourceType.Patient,\n  finder: (resource) => resource['active'] == true,\n);\n\n// Get all resources of specified types\nfinal allPatients = await FhirDb().getActiveResourcesOfType(\n  resourceTypes: [R4ResourceType.Patient],\n);\n\n// Get all resources in the database\nfinal allResources = await FhirDb().getAllActiveResources();\n"})}),"\n",(0,i.jsx)(n.h3,{id:"deleting-resources",children:"Deleting Resources"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-dart",children:"// Delete a resource by type and ID\nawait FhirDb().delete(\n  resourceType: R4ResourceType.Patient,\n  id: '12345',\n);\n\n// Delete all resources of a type\nawait FhirDb().deleteSingleType(\n  resourceType: R4ResourceType.Patient,\n);\n\n// Delete all resources in the database\nawait FhirDb().deleteAllResources();\n"})}),"\n",(0,i.jsx)(n.h2,{id:"advanced-features",children:"Advanced Features"}),"\n",(0,i.jsx)(n.h3,{id:"resource-versioning-and-history",children:"Resource Versioning and History"}),"\n",(0,i.jsx)(n.p,{children:"The database automatically manages resource versions when updating:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-dart",children:"// Save a resource initially\nfinal patient = await FhirDb().save(resource: patient);\n\n// Update the resource\npatient.active = FhirBoolean(true);\nfinal updatedPatient = await FhirDb().save(resource: patient);\n\n// The updated resource has an incremented versionId\nprint(updatedPatient.meta?.versionId); // Incremented version\n\n// Previous versions are accessible in the history\n"})}),"\n",(0,i.jsx)(n.p,{children:"You can configure version IDs to use timestamps instead of incremental numbers:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-dart",children:"// Enable timestamp-based versioning\nFhirDb().versionIdAsTime = true;\n"})}),"\n",(0,i.jsx)(n.h3,{id:"syncing-support",children:"Syncing Support"}),"\n",(0,i.jsx)(n.p,{children:"For applications requiring offline-first capabilities with later synchronization:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-dart",children:"// Enable storing resources for sync\nFhirDb().storeForSync = true;\n\n// Later, retrieve resources that need syncing\nfinal syncResources = await FhirDb().getSync();\n\n// Clear the sync queue after successful server sync\nawait FhirDb().clearSync();\n"})}),"\n",(0,i.jsx)(n.h3,{id:"reactive-database-updates",children:"Reactive Database Updates"}),"\n",(0,i.jsx)(n.p,{children:"Subscribe to resource changes using RxDart BehaviorSubjects:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-dart",children:"// Get a subject that emits patient changes\nfinal patientSubject = FhirDb().subject(\n  resourceType: R4ResourceType.Patient,\n  id: '12345',\n);\n\n// Listen for changes\npatientSubject.listen((patient) {\n  if (patient != null) {\n    // Handle updated patient\n  } else {\n    // Handle patient deletion\n  }\n});\n"})}),"\n",(0,i.jsx)(n.p,{children:"Subscribe to all sync events:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-dart",children:"final syncSubject = FhirDb().listenSync();\nsyncSubject.listen((resource) {\n  // Handle resource changes for sync\n});\n"})}),"\n",(0,i.jsx)(n.h3,{id:"working-with-canonical-resources",children:"Working with Canonical Resources"}),"\n",(0,i.jsx)(n.p,{children:"You can store Canonical Resources in their own Boxes just as you do with any other Resource. However, that stores them by ID, and often with Canonical resources, they are searched by URI. This is a single box that contains only different types of canonical resources, stored by URI (useful if you need a local Canonical Resource Cache):"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-dart",children:"// Save a canonical resource (e.g., a ValueSet)\nawait FhirDb().saveCanonicalResource(resource: valueSet);\n\n// Retrieve a canonical resource by URL\nfinal valueSet = await FhirDb().getCanonicalResource(\n  url: 'http://example.org/fhir/ValueSet/my-codes',\n);\n\n// Get all canonical resources of a specific type\nfinal allValueSets = await FhirDb().getAllCanonicalByType<ValueSet>(\n  type: R4ResourceType.ValueSet,\n);\n"})}),"\n",(0,i.jsx)(n.h3,{id:"general-storage",children:"General Storage"}),"\n",(0,i.jsx)(n.p,{children:"For non-FHIR data:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-dart",children:"// Save arbitrary objects\nfinal key = await FhirDb().saveGeneral(object: {'name': 'Test'});\n\n// Retrieve by key\nfinal object = await FhirDb().readGeneral(key: key);\n\n// Search general objects\nfinal results = await FhirDb().searchGeneral(\n  finder: (obj) => (obj as Map)['name'] == 'Test',\n);\n\n// Delete or clear general storage\nawait FhirDb().deleteFromGeneral(key: key);\nawait FhirDb().clearGeneral();\n"})}),"\n",(0,i.jsx)(n.h2,{id:"encryption",children:"Encryption"}),"\n",(0,i.jsx)(n.p,{children:"The database is encrypted by default, but you can provide your own encryption key:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-dart",children:"// Initialize with encryption\nawait FhirDb().init(pw: 'secure-password');\n\n// Update the encryption key\nawait FhirDb().updatePw(oldPw: 'old-password', newPw: 'new-password');\n"})}),"\n",(0,i.jsx)(n.p,{children:"The library uses HMAC-SHA256 to derive secure encryption keys from passwords."}),"\n",(0,i.jsx)(n.h2,{id:"performance-considerations",children:"Performance Considerations"}),"\n",(0,i.jsx)(n.p,{children:"While the in-memory database offers exceptional performance, be mindful of resource usage:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"The database keeps all data in memory, making it very fast"}),"\n",(0,i.jsx)(n.li,{children:"Large datasets (e.g., 20GB of FHIR data) will work, but require sufficient RAM"}),"\n",(0,i.jsx)(n.li,{children:"For mobile applications, consider data volume constraints"}),"\n",(0,i.jsx)(n.li,{children:"Periodically close unused boxes for optimal memory management with large datasets"}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-dart",children:"// Close specific resource type boxes\nawait FhirDb().closeResourceBoxes(types: [R4ResourceType.Patient]);\n\n// Close specific boxes\nawait FhirDb().closeHistoryBox();\nawait FhirDb().closeGeneralBox();\n\n// Close all boxes\nawait FhirDb().closeAllBoxes();\n"})}),"\n",(0,i.jsx)(n.h2,{id:"example",children:"Example"}),"\n",(0,i.jsx)(n.p,{children:"A complete example of using the database in a Flutter application:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-dart",children:"import 'package:fhir_r4/fhir_r4.dart';\nimport 'package:fhir_r4_db/fhir_r4_db.dart';\nimport 'package:flutter/material.dart';\n\nvoid main() async {\n  WidgetsFlutterBinding.ensureInitialized();\n  \n  // Initialize the database\n  await FhirDb().init(pw: 'secure-password');\n  \n  // Enable versioning and sync features\n  FhirDb().versionIdAsTime = true;\n  FhirDb().storeForSync = true;\n  \n  runApp(MyApp());\n}\n\nclass MyApp extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      home: PatientListScreen(),\n    );\n  }\n}\n\nclass PatientListScreen extends StatefulWidget {\n  @override\n  _PatientListScreenState createState() => _PatientListScreenState();\n}\n\nclass _PatientListScreenState extends State<PatientListScreen> {\n  List<Patient> patients = [];\n  \n  @override\n  void initState() {\n    super.initState();\n    _loadPatients();\n  }\n  \n  Future<void> _loadPatients() async {\n    final resources = await FhirDb().getActiveResourcesOfType(\n      resourceTypes: [R4ResourceType.Patient],\n    );\n    \n    setState(() {\n      patients = resources.map((r) => r as Patient).toList();\n    });\n  }\n  \n  Future<void> _addPatient() async {\n    final patient = Patient(\n      name: [\n        HumanName(\n          family: 'Doe'.toFhirString,\n          given: ['John'.toFhirString],\n        ),\n      ],\n      birthDate: FhirDate('1970-01-01'),\n    );\n    \n    await FhirDb().save(resource: patient);\n    _loadPatients();\n  }\n  \n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(title: Text('Patient List')),\n      body: ListView.builder(\n        itemCount: patients.length,\n        itemBuilder: (context, index) {\n          final patient = patients[index];\n          return ListTile(\n            title: Text(patient.name?.first.family?.value ?? 'Unnamed'),\n            subtitle: Text(patient.id?.value ?? ''),\n            trailing: IconButton(\n              icon: Icon(Icons.delete),\n              onPressed: () async {\n                await FhirDb().delete(resource: patient);\n                _loadPatients();\n              },\n            ),\n          );\n        },\n      ),\n      floatingActionButton: FloatingActionButton(\n        onPressed: _addPatient,\n        child: Icon(Icons.add),\n      ),\n    );\n  }\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:"This example demonstrates a basic patient management application using the FHIR database for local storage, with the ability to add and delete patients."}),"\n",(0,i.jsx)(n.h3,{id:"benchmarking",children:"Benchmarking"}),"\n",(0,i.jsxs)(n.p,{children:["This is not true benchmarking, its purely to give an idea of what you can expect if you're using this. I'm running it on my computer, and I stored the OPEN FHIR data set ",(0,i.jsx)(n.a,{href:"https://physionet.org/content/mimic-iv-fhir-demo/2.0/",children:"MIMIC-IV Clinical Database Demo on FHIR"}),". It contains 876.2 MB of data, or about ~900,000 FHIR resources. It took about 15 minutes to load all of that into the database (because there's no good bulk load option)."]})]})}function u(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},8453:(e,n,a)=>{a.d(n,{R:()=>s,x:()=>o});var i=a(6540);const t={},r=i.createContext(t);function s(e){const n=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:s(e.components),i.createElement(r.Provider,{value:n},e.children)}}}]);